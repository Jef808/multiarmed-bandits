#+title: Noise Generation

* Gaussian Noise generator
Two simple ways of generating samples from a Gaussian distribution:
*** Box and Muller method
#+begin_export latex
\begin{theroem}\label{thrm:box-muller}\cite{Box1958ANO}[See also
[[https://en.wikipedia.org/wiki/Marsaglia_polar_method][Wikipedia page]]]
Let $u$ and $v$ be independant samples chosen from a uniform distribution on $(0, 1) \subset \mathbb{R}$.
Let
\begin{equation}
  z_0 = R \cos (\Theta) = \sqrt{-2 \log u } \cos (2 \pi v)
\end{equation}
and
\begin{equation}
  z_1 = R \sin (\Theta) = \sqrt{-2 \log u } \sin (2 \pi v).
\end{equation}
Then $z_0$ and $z_1$ are independant random variables both distributed a standard normal distribution of mean $0$ and variance $1$.
Generate samples from a standard normal distribution with mean $\mu$ and variance $\sigma^2$ by considering the random variable $Z_{0,1} = \mu + \sigma * z_{0,1}$.
\end{theorem}
#+end_export
*** Marsaglia method
#+begin_export latex
\begin{theroem}\cite{MR172441}[[[https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform#cite_ref-2][Wikipedia page]]]
Consider $\mathbb{\overline{D}} = \{ (x, y) \mid ||(x, y)||_{\text{euc} \leq 1 \}$ the closed unit disk and
$\mathbb{Sq} = [0, 1] \times [0, 1]$.
Let us pick $u, v$ two independant random variables with values in $\mathbb{Sq}$ which are conditioned by the constraint $u^2 + v^2 < 1$.
Then
\begin{equation}
  z_0 = u * (-2 \log{ \frac{( u ^ 2 + v ^ 2 )} {(u ^ 2 + v ^ 2)} }^{1/2}
\end{equation}
and
\begin{equation}
  z_1 = v * (-2 \log{ \frac{( u ^ 2 + v ^ 2 )} {(u ^ 2 + v ^ 2)} }^{1/2},
\end{equation}
form a pair of independant random variables both distributed along a standard normal distribution of mean $0$ and variance $1$.
\end{theorem}
#+end_export

** Test
*** Box and Muller method
#+begin_src python :session
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
#+end_src

#+RESULTS:

As a test, we'll generate samples from a normal distribution using numpy's blackbox:
#+begin_src python :session
mu = 0.0
sigma = 1.0
number_of_samples = 200
normal_samples = np.random.default_rng().normal(mu, sigma, number_of_samples)
#+end_src

#+RESULTS:

Sanity checks:
#+begin_src python :session
mean_near_mu = abs( mu - np.mean(normal_samples) )
std_near_sigma = abs(sigma - np.std(normal_samples, ddof=1))

assert(mean_near_mu < 0.2)
assert(std_near_sigma < 0.2)
#+end_src

#+RESULTS:

Plot the above
#+begin_src python :session :results file
fig=plt.figure(figsize=(4,2))
count, bins, ignored = plt.hist(normal_samples, 30, ec='orange', fc='steelblue', density=True)
plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *
               np.exp( - (bins - mu)**2 / (2 * sigma**2) ),
         linewidth=2, color='violet', alpha=0.5)
fig.tight_layout()
fname="images/numpyExpectationsBarChart.png"
plt.savefig(fname)
fname
#+end_src

#+RESULTS:
[[file:]]

Compare with data generated from our own gaussian sampling method:
#+begin_src python :session
import math
import random

def getGaussianPair():
    u = random.random()
    v = random.random()
    while u == 0:
        u = random.random()
    sqrt_minustwo_logu = math.sqrt(-2 * math.log(u))
    two_pi_v = 2 * math.pi * v
    z_0 = sqrt_minustwo_logu * math.cos(two_pi_v)
    z_1 = sqrt_minustwo_logu * math.sin(two_pi_v)
    return [z_0, z_1]

def sample():
    if (self.has_spare):
      self.sample.append(self.spare)
      self.has_spare = False
    else:
      self.spare, result = getGaussianPair()
      self.has_spare = True
      self.sample.append(result)

def getSample(sample_size):
    result = []
    for _ in range(sample_size):
        result.append(getGaussianPair()[0])
        print(result)
#+end_src
#+RESULTS:

Sanity checks:
#+begin_src python :session
# sample = getSample(number_of_samples)

# mean_near_mu = abs( mu - means(my_samples) )
# std_near_sigma = abs(sigma - np.std(my_samples, ddof=1))

# assert(len(my_samples) > 0, "Nonempty samples")
# assert(mean_near_mu < 0.2)
# assert(sigma_near_one < 0.2)
#+end_src

#+RESULTS:

#+begin_src python :session :results file
sample = getSample(number_of_samples)

fig=plt.figure(figsize=(4,2))
count, bins, ignored = plt.hist(sample, 30, ec='orange', fc='steelblue', density=True, histtype='barstacked')
plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *
               np.exp( - (bins - mu)**2 / (2 * sigma**2) ),
         linewidth=2, color='violet', alpha=0.5)
fig.tight_layout()
fname="images/expectationsBarChart.png"
plt.savefig(fname)
fname
#+end_src

#+RESULTS:
[[file:]]

*** Testing source blocks
#+begin_src python results: output
#+end_src

#+RESULTS:
